# Automatically generated by Pynguin.
import caso_covertura_068 as module0


def test_case_0():
    try:
        var0 = True
        var1 = module0.remove_extras(var0)
    except BaseException:
        pass


def test_case_1():
    try:
        var0 = None
        var1 = module0.remove_extras(var0)
    except BaseException:
        pass


def test_case_2():
    try:
        var0 = 492
        var1 = module0.remove_extras(var0)
    except BaseException:
        pass


def test_case_3():
    try:
        var0 = -1826.0
        var1 = module0.remove_extras(var0)
    except BaseException:
        pass


def test_case_4():
    try:
        var0 = '@V;F='
        var1 = module0.remove_extras(var0)
        assert var1 is not None
        var2 = None
        var3 = module0.remove_extras(var2)
    except BaseException:
        pass


def test_case_5():
    try:
        var0 = '@V;F='
        var1 = module0.remove_extras(var0)
        assert var1 is not None
        var2 = False
        var3 = module0.remove_extras(var2)
    except BaseException:
        pass


def test_case_6():
    try:
        var0 = 43
        var1 = module0.remove_extras(var0)
    except BaseException:
        pass


def test_case_7():
    try:
        var0 = -219
        var1 = module0.remove_extras(var0)
    except BaseException:
        pass


def test_case_8():
    try:
        var0 = -488.1975
        var1 = module0.remove_extras(var0)
    except BaseException:
        pass


def test_case_9():
    try:
        var0 = None
        var1 = module0.remove_extras(var0)
    except BaseException:
        pass


def test_case_10():
    try:
        var0 = '@V;F='
        var1 = module0.remove_extras(var0)
        assert var1 is not None
        var2 = True
        var3 = module0.remove_extras(var2)
    except BaseException:
        pass


def test_case_11():
    try:
        var0 = '@V;F='
        var1 = module0.remove_extras(var0)
        assert var1 is not None
        var2 = '@V;F='
        var3 = module0.remove_extras(var2)
        assert var3 is not None
        var4 = 'YofZ7'
        var5 = module0.remove_extras(var4)
        assert var5 is not None
        var6 = '@V;F='
        var7 = module0.remove_extras(var6)
        assert var7 is not None
        var8 = 'YofZ7'
        var9 = module0.remove_extras(var8)
        assert var9 is not None
        var10 = '@V;F='
        var11 = module0.remove_extras(var10)
        assert var11 is not None
        var12 = 'Yppa'
        var13 = module0.remove_extras(var12)
        assert var13 is not None
        var14 = 3408.0
        var15 = module0.remove_extras(var14)
    except BaseException:
        pass


def test_case_12():
    try:
        var0 = -291.512302
        var1 = module0.remove_extras(var0)
    except BaseException:
        pass


def test_case_13():
    try:
        var0 = '@V;F='
        var1 = module0.remove_extras(var0)
        assert var1 is not None
        var2 = 'YofZ7'
        var3 = module0.remove_extras(var2)
        assert var3 is not None
        var4 = '@V;F='
        var5 = module0.remove_extras(var4)
        assert var5 is not None
        var6 = 'Yppa'
        var7 = module0.remove_extras(var6)
        assert var7 is not None
        var8 = '@V;F='
        var9 = module0.remove_extras(var8)
        assert var9 is not None
        var10 = False
        var11 = module0.remove_extras(var10)
    except BaseException:
        pass


def test_case_14():
    try:
        var0 = '@V;F='
        var1 = module0.remove_extras(var0)
        assert var1 is not None
        var2 = 'YofZ7'
        var3 = module0.remove_extras(var2)
        assert var3 is not None
        var4 = '@V;F='
        var5 = module0.remove_extras(var4)
        assert var5 is not None
        var6 = 'Yppa'
        var7 = module0.remove_extras(var6)
        assert var7 is not None
        var8 = True
        var9 = module0.remove_extras(var8)
    except BaseException:
        pass


def test_case_15():
    try:
        var0 = '@V;F='
        var1 = module0.remove_extras(var0)
        assert var1 is not None
        var2 = None
        var3 = module0.remove_extras(var2)
    except BaseException:
        pass


def test_case_16():
    try:
        var0 = '@V;F='
        var1 = module0.remove_extras(var0)
        assert var1 is not None
        var2 = 'YofZ7'
        var3 = module0.remove_extras(var2)
        assert var3 is not None
        var4 = '@V;F='
        var5 = module0.remove_extras(var4)
        assert var5 is not None
        var6 = 'Yppa'
        var7 = module0.remove_extras(var6)
        assert var7 is not None
        var8 = '@V;F='
        var9 = module0.remove_extras(var8)
        assert var9 is not None
        var10 = '@V;F='
        var11 = module0.remove_extras(var10)
        assert var11 is not None
        var12 = 'YofZ7'
        var13 = module0.remove_extras(var12)
        assert var13 is not None
        var14 = 86.1353
        var15 = module0.remove_extras(var14)
    except BaseException:
        pass


def test_case_17():
    try:
        var0 = -376
        var1 = module0.remove_extras(var0)
    except BaseException:
        pass


def test_case_18():
    try:
        var0 = '@V;F='
        var1 = module0.remove_extras(var0)
        assert var1 is not None
        var2 = 'YofZ7'
        var3 = module0.remove_extras(var2)
        assert var3 is not None
        var4 = '@V;F='
        var5 = module0.remove_extras(var4)
        assert var5 is not None
        var6 = 'Yppa'
        var7 = module0.remove_extras(var6)
        assert var7 is not None
        var8 = '@V;F='
        var9 = module0.remove_extras(var8)
        assert var9 is not None
        var10 = True
        var11 = module0.remove_extras(var10)
    except BaseException:
        pass


def test_case_19():
    try:
        var0 = '@V;F='
        var1 = module0.remove_extras(var0)
        assert var1 is not None
        var2 = 'YofZ7'
        var3 = module0.remove_extras(var2)
        assert var3 is not None
        var4 = '@V;F='
        var5 = module0.remove_extras(var4)
        assert var5 is not None
        var6 = 'Yppa'
        var7 = module0.remove_extras(var6)
        assert var7 is not None
        var8 = '@V;F='
        var9 = module0.remove_extras(var8)
        assert var9 is not None
        var10 = 'b)g(2xbi.]*k.YBYl\rf'
        var11 = module0.remove_extras(var10)
        assert var11 is not None
        var12 = -547
        var13 = module0.remove_extras(var12)
    except BaseException:
        pass
